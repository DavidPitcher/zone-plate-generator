%!PS
%%Title: Zoneplate Generator
%%Creator: David Pitcher
%%CreationDate: July 6, 2025
%%lastModified: July 6, 2025
%%DocumentPaperSizes: Letter

%***********************************************************************
% Change the following numbers to suit your Zoneplate
%***********************************************************************

/FOCAL 210 def              % change number to whatever focal length in mm you want

/RINGS 6 def                % number of zones

/PUNCH_DIAMETER 10 def      % diamter of the punch outline to the out the zone plate

/MAG 1 def                 % change number to whatever magnification you want the
                            % printed zone plate to be

/WAVE_LENGTH 0.00056 def    % change number to whatever wavelength in mm you want
                            % 0.00022 is the wavelength of green light
                            % 0.00056 is the wavelength of daylight

/ZP_CONST 1.86 def          % Zone plate constant 

/S 0.1 def                  % extra width to add to pinhole diameter with the purpose of 
                            % deciding the number of pinholes in each zone.  Use 2 or more,
                            % decimals are ok (i.e.: 2.3). The larger the number the 
                            % less pinholes in each ring.

/ROWS 3 def     % number of rows of zone plates
/COLS 9 def     % number of columns of zone plates per row

/DEBUG false def

%************************************************************************
% Area of each zone determined by optimum pinhole size of the center zone
% Reference information for ideal pinhole size based on light wavelength
% Central Pinhole Size: ZONE_PLATE_CONST * sqrt(WAVE_LENGTH * PINHOLE_FOCAL_LENGTH)
% Zone Plate Constant: 1.86 (Values can range from 1.20 to 2.00)
% Wave Length: 0.0022 mm (green light) or 0.0056 mm (daylight)
% Example: 1.86 * sqrt(0.0056 * 210)
%
% Zone Plate can be magnified to allow for printing larger and photograping onto film
% Zone Plate Ring Size: sqrt(WAVE_LENGTH * FOCAL_LENGTH) * ZONE_PLATE_CONST * Magnification_Factor
%************************************************************************
/mmToPoints {2.83 mul} def                    % converts mm to points
/pointsToMm {2.83 div} def                    % converts points to mm
/pointsToMicrons {352.778 mul} def            % converts points to microns (Âµm)
/pi 3.1415926536 def                          % define pi
/area 0 def                                   % initialize variable "area" to store
                                              % the sum of areas of all zones
/counter 0 def                                % initialize counter of clear zones
/logsqrt2 2 sqrt log def                      % log(sqrt(2))

/center WAVE_LENGTH FOCAL mul sqrt ZP_CONST mul MAG mul mmToPoints def  % size of central pinhole in points  
/pagewidth 215 def  % width of the page in mm
/pageheight 279 def % height of the page in mm
/totalZonePlateSize 21.5 def
/currentRowIndex 1 def
/offsetx {totalZonePlateSize mul mmToPoints} def % offset for x-axis
/offsety {pageheight exch totalZonePlateSize mul sub mmToPoints} def % offset for y-axis

gsave 
%******************************************************************

%*****************************************************************
% Draw 8" x 10" frame around page
%*****************************************************************
/drawBorder {
    gsave   
    1 mmToPoints setlinewidth                % Set line width
    newpath
    10 mmToPoints 269 mmToPoints moveto      % Start at (10mm, 269mm)
    pagewidth 20 sub mmToPoints 0 rlineto    % Draw to the right
    0 20 pageheight sub mmToPoints rlineto   % Draw down
    20 pagewidth sub mmToPoints 0 rlineto    % Draw left
    closepath
    stroke
    grestore
} def
%*****************************************************************  

%*****************************************************************
% Draw Zone Plates in Grid Pattern
%*****************************************************************
/drawZonePlate {
    /colIndex exch def
    /rowIndex exch def

    gsave

    % Translate current position to correct grid position
    colIndex offsetx rowIndex offsety translate
    
    % Draw Punch Outline to cut zone plate from film
    0 setgray                                  
    .5 mmToPoints setlinewidth                                                  
    0 0 PUNCH_DIAMETER MAG mul 2 div mmToPoints 0 360 arc 
    stroke
    
    % Draw all the outer zone plate rings
    % Arc command xCord, yCord, radius, startAngle, endAngle
    % Loop starts at RINGS-1 and counts down(-1) to ring 1
    % For Loop format: start# incrementby end#
    RINGS 1 sub -1 1 {
        % Pops the current loop value and calculate
        % outer most opaque and transparent ring pairs
        /opaque_ring exch 2 mul 1 add def
        
        % Calculate radius of the rings
        % sqrt(WAVE_LENGTH * FOCAL * opaque_ring) * ZP_CONST * MAG    
        /ring_radius FOCAL WAVE_LENGTH mul opaque_ring mul sqrt ZP_CONST mul MAG mul 2 div mmToPoints def
        0 setgray
        0 0 ring_radius 0 360 arc fill

        1 setgray
        /ring_radius opaque_ring 1 sub FOCAL mul WAVE_LENGTH mul sqrt ZP_CONST mul MAG mul 2 div mmToPoints def
        0 0 ring_radius 0 360 arc fill
    } for 

    % Draw the inner ring
    0 setgray     
    0 0 center 2 div 0 360 arc fill 

    grestore
} def

/drawZoneSieve {
    /colIndex exch def
    /rowIndex exch currentRowIndex add def

    gsave

    % Translate current position to correct grid position
    colIndex offsetx rowIndex offsety translate
    
    % Draw Punch Outline to cut zone plate from film
    0 setgray                                  
    .5 mmToPoints setlinewidth                                                   
    0 0 PUNCH_DIAMETER 2 div mmToPoints 0 360 arc 
    stroke

    /Z RINGS 2 mul 1 sub 2 idiv 2 mul 1 add def                 % Z = number of pinholes in sieve
    Z -2 2 {                                                    % loops to print rings         
        /z1 exch 1 sub def                                      % z1 = # of lowest ring being calculated       
        /zw z1 1 add sqrt z1 sqrt sub center mul 2 div def      % zone width
        /zcr z1 sqrt center mul zw add def                      % zone center diameter
        /perimeter pi zcr mul def                               % perimeter of zcr
        /radius zcr 2 div def                                   % radius of zcr
        /holes zw 1.5 mul S add perimeter exch div ceiling def  % # of pinholes in ring
        /degrees 360 holes div def                              % degrees of separation between pinholes
        /starting degrees 13 sub def                            % avoids start at 0 degrees
        /pinhole zw 1.5 mul 2 div def                           % radius of pinhole in ring
        /area pinhole dup mul pi mul holes mul area add def     % keeps tracks of areas of pinholes
        DEBUG {
            (----------------- \n) print
            (Z: ) print
            Z ==
            (z1: ) print
            z1 ==
            (zw: ) print
            zw ==
            (zcr: ) print
            zcr ==
            (perimeter: ) print
            perimeter ==
            (radius: ) print
            radius ==
            (holes: ) print
            holes ==
            (degrees: ) print
            degrees ==
            (starting: ) print
            starting ==
            (pinhole: ) print
            pinhole ==
            (area: ) print
            area ==
        } if

        starting rotate                                         % set the starting angle to avoid starting at 0 degrees              
        1 1 holes {                                             % loops to print holes in a ring
            degrees rotate                                      % rotate axis by pinholes degrees of separation 
            radius 0 pinhole 0 360 arc fill                     % draw the pinhole
            /counter counter 1 add def                          % counter of # of holes printed
        } for                                               % return to next # in ring  
    } for                                                   % return to next ring 

    0 0 center 2 div 0 360 arc fill                         % print the central pinhole
    counter counter 1 add def 
    /area center 2 div dup mul pi mul area add def
    grestore
} def

/drawZonePlateDescription {
    /colIndex exch def
    /rowIndex exch def
    
    gsave
    /Times-Roman findfont
    10 scalefont
    setfont
    0 setgray
    colIndex offsetx rowIndex offsety moveto

    /zpDiameter WAVE_LENGTH FOCAL mul RINGS mul sqrt ZP_CONST mul MAG mul 2 mul def
    /zpFocal zpDiameter RINGS 2 mul 1 sub WAVE_LENGTH mul div def
    /fstop zpFocal zpDiameter div def

    /str 150 string def
    (Focal Length: ) show
    FOCAL str cvs show
    (mm) show
    ( | Zones: ) show
    RINGS str cvs show
    ( | Center Pinhole Size: ) show
    center pointsToMicrons str cvs show
    (um) show
    ( | Zone Plate Diameter: ) show
    zpDiameter str cvs show
    (mm) show
    ( | F/Stop: ) show
    fstop cvi str cvs show
    grestore
} def

/drawZoneSieveDescription {
    /colIndex exch def
    /rowIndex exch def
    
    gsave
    /Times-Roman findfont
    10 scalefont
    setfont
    0 setgray
    colIndex offsetx rowIndex offsety moveto
    /area center 2 div dup mul pi mul area add def % add the are of central pinhole 
    area sqrt MAG div pointsToMm dup mul   
    % area ==
    /fstop1 area FOCAL exch pi div 4 mul sqrt div def
    
    /zpDiameter FOCAL fstop1 div def 

    /str 150 string def
    (Focal Length: ) show
    FOCAL str cvs show
    (mm) show
    ( | Zones: ) show
    RINGS str cvs show
    ( | Center Pinhole Size: ) show
    center pointsToMicrons str cvs show
    (um) show
    ( | Zone Sieve Diameter: ) show
    zpDiameter str cvs show
    (mm) show
    ( | F/Stop: ) show
    fstop1 cvi str cvs show
    grestore
} def


% Draw border around the page
drawBorder

%Draw grid of Zone Plated
1 1 ROWS {                                    % Loop through rows (1-based)
    /row exch def
    1 1 COLS {                                % Loop through columns (1-based)
        /col exch def
        row col drawZonePlate                 % pass column and row indices
    } for
} for
/currentRowIndex ROWS currentRowIndex add def

%Print zone plate description
currentRowIndex 1 drawZonePlateDescription
/currentRowIndex 1 currentRowIndex add def

% Draw grid of Zone Sieves
% 1 1 ROWS {                                    % Loop through rows (1-based)
%     /row exch def
%     1 1 COLS {                                % Loop through columns (1-based)
%         /col exch def
%         row col drawZoneSieve                 % pass column and row indices
%     } for
% } for
% /currentRowIndex ROWS currentRowIndex add def

% Print zone plate description
% 6 1 drawZoneSieveDescription
% /currentRowIndex 1 currentRowIndex add def


showpage

