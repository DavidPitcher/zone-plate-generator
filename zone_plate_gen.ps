%!PS
%%Title: Zoneplate Generator
%%Creator: David Pitcher
%%CreationDate: July 6, 2025
%%DocumentPaperSizes: Letter

%***********************************************************************
% Change the following numbers to suit zone plate or sieve
% ARGUMENTS:
%***********************************************************************

% change number to whatever focal length in mm you want
/FOCAL 210 def              

% number of opaque rings to generate
/RINGS 6 def                

% diamter of the punch outline to the out the zone plate
/PUNCH_DIAMETER 10 def      

% change number to whatever magnification you want the
% printed zone plate to be
/MAG 1 def                  

% change number to whatever wavelength in mm you want
% 0.00022 is the wavelength of green light
% 0.00056 is the wavelength of daylight
/WAVE_LENGTH 0.00056 def    

% scale factor for sieve holes on a ring
/SIEVE_SCALE 1.5 def        

% space between sieve holes in mm
% the greater the magnification, the larger the number should be
/SIEVE_SPACE 0.1  def       

% number of rows of zone plates
/ROWS 3 def                 

% number of columns of zone plates per row
/COLS 9 def                 

% type of zone plate to generate
% valid values are GRID, PLATE, SIEVE, PHOTON
/TYPE (PHOTON) def

%************************************************************************
% Constants
%************************************************************************
/pi 3.1415926536 def            
/pagewidth 216 def  
/pageheight 279 def 
/totalZonePlateSize 21.5 def    % controls spacing between zone plates
/currentRowIndex 1 def
%************************************************************************

%************************************************************************
% Unit Conversion Definitions   
%************************************************************************
/mmToPoints {2.83 mul} def                    
/pointsToMm {2.83 div} def                    
/pointsToMicrons {352.778 mul} def            
/offsetx {totalZonePlateSize mul mmToPoints} def 
/offsety {pageheight exch totalZonePlateSize mul sub mmToPoints} def 

gsave 
%******************************************************************

%*****************************************************************
% Calculate the Current Ring Radius
%*****************************************************************
/calc_radius_mm {
    % ring radius = sqrt(n * λ * f + (n^2 * λ^2) / 4)
    % n is on stack and represents the ring number
    dup dup mul WAVE_LENGTH dup mul mul 4 div   % (n^2*λ^2)/4
    exch WAVE_LENGTH mul FOCAL mul add          % n * λ * f + (n^2*λ^2)/4
    sqrt MAG mul                                % sqrt(n * λ * f + (n^2 * λ^2) / 4) * M
} def
%*****************************************************************

%*****************************************************************
% Calculate Number of Sieve Circles in a Ring
% Usage: annulus_radius_mm ring_center_radius_mm calc_num_circles → num_circles
%*****************************************************************
/calc_num_circles {
    % Annulus Width on stack
    % Annulus Center Radius on stack
    /c_r exch def
    /a_w exch def
    /circumference_mm c_r 2 mul pi mul def % circumference = 2 * π * r
    circumference_mm a_w SIEVE_SPACE add div floor cvi
} def
%*****************************************************************

%*****************************************************************
% Calculate effective f-stop
% Usage: num_rings focal_length calc_effective_fstop → fstop
%******************************************************************
/calc_effective_fstop {
    % num_rings focal_length on stack
    % Calculate radius of innermost ring (n=1) in mm
    /fstop_fl exch def
    /fstop_r exch def

    /center_ring_area 1 calc_radius_mm MAG div dup mul pi mul def

    % Total effective area = area of center ring * number of rings
    % Calculate effective diameter from total area
    % Calculate f-stop: f/D
    /fstop_effective_area center_ring_area fstop_r mul def
    /fstop_effective_diameter fstop_effective_area 4 mul pi div sqrt def % D = 2 * sqrt(A/π) = sqrt(4A/π) def
    fstop_fl fstop_effective_diameter div 0.5 add cvi
} def
%*****************************************************************

%*****************************************************************
% Calculate effective f-stop of a zone sieve
% Usage: num_rings focal_length calc_sieve_effective_fstop → fstop
%*****************************************************************
/calc_sieve_effective_fstop {
    % num_rings focal_length on stack
    /sieve_fstop_fl exch def
    /sieve_fstop_r exch def
    
    % Calculate center ring area (always solid for zone sieve)
    /center_ring_area 1 calc_radius_mm MAG div dup mul pi mul def
    
    % Initialize total effective area with center ring
    /sieve_total_area center_ring_area def
    2 2 sieve_fstop_r 2 mul {
        /n exch def
        
        /outer_radius_mm n calc_radius_mm def
        /inner_radius_mm n 1 sub calc_radius_mm def
        /annulus_width_mm outer_radius_mm inner_radius_mm sub def
        
        % Calculate the center of the ring (midpoint between inner and outer radii)
        /ring_center_radius_mm inner_radius_mm annulus_width_mm 2 div add def
        
        % Calculate number of circles in this ring
        /num_circles annulus_width_mm SIEVE_SCALE mul ring_center_radius_mm calc_num_circles def
        
        % Calculate area of each circle in this ring
        /sieve_hole_radius annulus_width_mm SIEVE_SCALE mul 2 div def
        /sieve_hole_area sieve_hole_radius dup mul pi mul def
        
        % Add total area of all holes in this ring to the cumulative area
        /sieve_total_area sieve_total_area num_circles sieve_hole_area mul add def
    } for
    
    % Calculate effective diameter from total area
    /sieve_effective_diameter sieve_total_area 4 mul pi div sqrt def % D = sqrt(4A/π)
    
    % Calculate f-stop: f/D and round to nearest integer
    sieve_fstop_fl sieve_effective_diameter div 0.5 add cvi
} def
%*****************************************************************

%*****************************************************************
% Draw 8" x 10" frame around page
%*****************************************************************
/drawBorder {
    gsave   
    1 mmToPoints setlinewidth                % Set line width
    newpath
    10 mmToPoints 269 mmToPoints moveto      % Start at (10mm, 269mm)
    pagewidth 20 sub mmToPoints 0 rlineto    % Draw to the right
    0 20 pageheight sub mmToPoints rlineto   % Draw down
    20 pagewidth sub mmToPoints 0 rlineto    % Draw left
    closepath
    stroke
    grestore
} def
%*****************************************************************  

%*****************************************************************
% Draw Zone Plates in Grid Pattern
%*****************************************************************
/drawZonePlate {
    /colIndex exch def
    /rowIndex exch def

    gsave

    % Translate current position to correct grid position
    colIndex offsetx rowIndex offsety translate
    
    % Draw Punch Outline to cut zone plate from film
    0 setgray                                  
    .5 mmToPoints setlinewidth                                                  
    0 0 PUNCH_DIAMETER MAG mul 2 div mmToPoints 0 360 arc 
    stroke
    
    1 2 RINGS 2 mul {
        /n exch def
        
        /outer_radius_mm n calc_radius_mm def
        /inner_radius_mm n 1 sub calc_radius_mm def
        /annulus_width_mm outer_radius_mm inner_radius_mm sub def

        % Calculate the center of the ring (midpoint between inner and outer radii)
        /ring_center_radius_mm inner_radius_mm annulus_width_mm 2 div add def

        0 setgray
        annulus_width_mm mmToPoints setlinewidth
        0 0 ring_center_radius_mm mmToPoints 0 360 arc
        stroke
        
    } for 

    grestore
} def
%*****************************************************************  

%*****************************************************************
% Draw Zone Sieve in Grid Pattern
%*****************************************************************
/drawZoneSieve {
    /colIndex exch def
    /rowIndex exch def

    gsave

    % Translate current position to correct grid position
    colIndex offsetx rowIndex offsety translate
    
    % Draw Punch Outline to cut zone plate from film
    0 setgray                                  
    .5 mmToPoints setlinewidth                                                   
    0 0 PUNCH_DIAMETER MAG mul 2 div mmToPoints 0 360 arc 
    stroke
    
    1 2 RINGS 2 mul {
        /n exch def
        
        /outer_radius_mm n calc_radius_mm def
        /inner_radius_mm n 1 sub calc_radius_mm def
        /annulus_width_mm outer_radius_mm inner_radius_mm sub def

        /ring_center_radius_mm inner_radius_mm annulus_width_mm 2 div add def
        n 1 eq {
            0 setgray
            annulus_width_mm mmToPoints setlinewidth
            0 0 ring_center_radius_mm mmToPoints 0 360 arc
            stroke 
        } {
            /num_circles annulus_width_mm SIEVE_SCALE mul ring_center_radius_mm calc_num_circles def
            /angular_spacing 360 num_circles div def
            rand 360 mod rotate  % Rotate by a random angle
            1 1 num_circles {
               0 setgray
               angular_spacing rotate
               ring_center_radius_mm mmToPoints 0 annulus_width_mm SIEVE_SCALE mul 2 div mmToPoints 0 360 arc fill
            } for
        } ifelse
    } for

    grestore
} def
%***************************************************************** 

%*****************************************************************
% Draw Photon Sieve in Grid Pattern
%*****************************************************************
/drawPhotonSieve {
    /colIndex exch def
    /rowIndex exch def

    gsave

    % Translate current position to correct grid position
    colIndex offsetx rowIndex offsety translate
    
    % Draw Punch Outline to cut zone plate from film
    0 setgray                                  
    .5 mmToPoints setlinewidth                                                   
    0 0 PUNCH_DIAMETER MAG mul 2 div mmToPoints 0 360 arc 
    stroke
    
    1 2 RINGS 2 mul {
        /n exch def
        
        /outer_radius_mm n 1 add calc_radius_mm def
        /inner_radius_mm n calc_radius_mm def
        /annulus_width_mm outer_radius_mm inner_radius_mm sub def

        /ring_center_radius_mm inner_radius_mm annulus_width_mm 2 div add def
        /num_circles annulus_width_mm SIEVE_SCALE mul ring_center_radius_mm calc_num_circles def
        /angular_spacing 360 num_circles div def
        rand 360 mod rotate
        1 1 num_circles {
            0 setgray
            angular_spacing rotate
            ring_center_radius_mm mmToPoints 0 annulus_width_mm SIEVE_SCALE mul 2 div mmToPoints 0 360 arc fill
        } for
    } for

    grestore
} def
%*****************************************************************  

%*****************************************************************
% Draw Zone Plate Description
%*****************************************************************
/drawZonePlateDescription {
    /colIndex exch def
    /rowIndex exch def
    gsave
    
    colIndex offsetx rowIndex offsety moveto
    
    /Times-Roman findfont
    10 scalefont
    setfont
    0 setgray
    /str 150 string def
    (Focal Length: ) show
    FOCAL str cvs show
    (mm) show
    ( | Zones: ) show
    RINGS str cvs show
    ( | Zone Plate Diameter: ) show
    RINGS 2 mul 1 sub calc_radius_mm 2 mul str cvs show
    (mm) show
    ( | F/Stop: ) show
    RINGS FOCAL calc_effective_fstop str cvs show
    
    grestore
} def
%*****************************************************************

%*****************************************************************
% Draw Zone Sieve Description
%*****************************************************************
/drawZoneSieveDescription {
    /colIndex exch def
    /rowIndex exch def
    gsave
    
    colIndex offsetx rowIndex offsety moveto
    
    /Times-Roman findfont
    10 scalefont
    setfont
    0 setgray
    /str 150 string def
    (Focal Length: ) show
    FOCAL str cvs show
    (mm) show
    ( | Zones: ) show
    RINGS str cvs show
    ( | Zone Plate Diameter: ) show
    RINGS 2 mul 1 sub calc_radius_mm 2 mul str cvs show
    (mm) show
    ( | F/Stop: ) show
    RINGS FOCAL calc_sieve_effective_fstop str cvs show
    
    grestore
} def
%*****************************************************************

%*****************************************************************
% Draw Zone Page with all types of Zone Plates in Grid Pattern
% Usage: rowIndex drawZonePage → updatedRowIndex
%*****************************************************************
/drawZonePage {
    /startRowIndex exch def
    /currentRowIndex startRowIndex def

    drawBorder
    
    %Draw grid of Zone Plates
    0 1 ROWS 1 sub {                                    
        /row exch def
        1 1 COLS {                                
            /col exch def
            row currentRowIndex add col drawZonePlate                 
        } for
    } for
    /currentRowIndex ROWS currentRowIndex add def
    
    %Print zone plate description
    currentRowIndex 1 drawZonePlateDescription
    /currentRowIndex 1 currentRowIndex add def
    
    % Draw grid of Zone Sieves
    0 1 ROWS 1 sub {                                    
        /row exch def
        1 1 COLS {                                
            /col exch def
            row currentRowIndex add col drawZoneSieve                 
        } for
    } for
    /currentRowIndex ROWS currentRowIndex add def
    
    % Print zone sieve description
    currentRowIndex 1 drawZoneSieveDescription
    /currentRowIndex 1 currentRowIndex add def
    
    % Draw grid of Photo Sieves
    0 1 ROWS 1 sub {                                    
        /row exch def
        1 1 COLS {                                
            /col exch def
            row currentRowIndex add col drawPhotonSieve                 
        } for
    } for
    /currentRowIndex ROWS currentRowIndex add def
    
    % Print photon sieve description
    currentRowIndex 1 drawZoneSieveDescription
    /currentRowIndex 1 currentRowIndex add def
    
    % Return the updated row index
    currentRowIndex
} def
%*****************************************************************

%*****************************************************************
% Draw a Single Zone Plate Centered on the Page
% Usage: drawCenteredZonePlate → -
%*****************************************************************
/drawCenteredZonePlate {
    gsave
    % Clear any existing drawing
    clippath 1 setgray fill
    0 setgray
    
    % Calculate center position for the zone plate
    % Center of page is at (pagewidth/2, pageheight/2)
    pagewidth 2 div mmToPoints
    pageheight 2 div mmToPoints
    translate
    
    % Draw zone plate at the center
    % Use existing drawZonePlate logic but without the translation
    % since we've already positioned at the center
    
    % Draw Punch Outline
    0 setgray                                  
    .5 mmToPoints setlinewidth                                                  
    0 0 PUNCH_DIAMETER MAG mul 2 div mmToPoints 0 360 arc 
    stroke
    
    1 2 RINGS 2 mul {
        /n exch def
        
        /outer_radius_mm n calc_radius_mm def
        /inner_radius_mm n 1 sub calc_radius_mm def
        /annulus_width_mm outer_radius_mm inner_radius_mm sub def

        % Calculate the center of the ring (midpoint between inner and outer radii)
        /ring_center_radius_mm inner_radius_mm annulus_width_mm 2 div add def

        0 setgray
        annulus_width_mm mmToPoints setlinewidth
        0 0 ring_center_radius_mm mmToPoints 0 360 arc
        stroke
    } for
    
    % Draw description at the bottom of the page
    grestore
    
    % Position for description - centered at bottom of page
    /Times-Roman findfont
    12 scalefont
    setfont
    0 setgray
    
    % Calculate total width of all description text components
    /str 150 string def
    /total_width 0 def
    /description (Zone Plate - Focal Length: ) def
    /total_width total_width description stringwidth pop add def
    /focal_str FOCAL str cvs def
    /total_width total_width focal_str stringwidth pop add def
    /total_width total_width (mm | Zones: ) stringwidth pop add def
    /rings_str RINGS str cvs def
    /total_width total_width rings_str stringwidth pop add def
    /total_width total_width ( | Diameter: ) stringwidth pop add def
    /diam_str RINGS 2 mul 1 sub calc_radius_mm 2 mul str cvs def
    /total_width total_width diam_str stringwidth pop add def
    /total_width total_width (mm | F/Stop: ) stringwidth pop add def
    /fstop_str RINGS FOCAL calc_effective_fstop str cvs def
    /total_width total_width fstop_str stringwidth pop add def
    
    % Position text with calculated center offset
    pagewidth 2 div mmToPoints total_width 2 div sub
    20 mmToPoints
    moveto
    
    % Show all text pieces in sequence
    description show
    focal_str show
    (mm | Zones: ) show
    rings_str show
    ( | Diameter: ) show
    diam_str show
    (mm | F/Stop: ) show
    fstop_str show
} def
%*****************************************************************

%*****************************************************************
% Draw a Single Zone Sieve Centered on the Page
% Usage: drawCenteredZoneSieve → -
%*****************************************************************
/drawCenteredZoneSieve {
    gsave
    % Clear any existing drawing
    clippath 1 setgray fill
    0 setgray
    
    % Calculate center position for the zone sieve
    % Center of page is at (pagewidth/2, pageheight/2)
    pagewidth 2 div mmToPoints
    pageheight 2 div mmToPoints
    translate
    
    % Draw zone sieve at the center
    % Use existing drawZoneSieve logic but without the translation
    
    % Draw Punch Outline
    0 setgray                                  
    .5 mmToPoints setlinewidth                                                   
    0 0 PUNCH_DIAMETER MAG mul 2 div mmToPoints 0 360 arc 
    stroke
    
    1 2 RINGS 2 mul {
        /n exch def
        
        /outer_radius_mm n calc_radius_mm def
        /inner_radius_mm n 1 sub calc_radius_mm def
        /annulus_width_mm outer_radius_mm inner_radius_mm sub def

        /ring_center_radius_mm inner_radius_mm annulus_width_mm 2 div add def
        n 1 eq {
            0 setgray
            annulus_width_mm mmToPoints setlinewidth
            0 0 ring_center_radius_mm mmToPoints 0 360 arc
            stroke 
        } {
            /num_circles annulus_width_mm SIEVE_SCALE mul ring_center_radius_mm calc_num_circles def
            /angular_spacing 360 num_circles div def
            rand 360 mod rotate  % Rotate by a random angle
            1 1 num_circles {
               0 setgray
               angular_spacing rotate
               ring_center_radius_mm mmToPoints 0 annulus_width_mm SIEVE_SCALE mul 2 div mmToPoints 0 360 arc fill
            } for
        } ifelse
    } for
    
    % Draw description at the bottom of the page
    grestore
    
    % Position for description - centered at bottom of page
    /Times-Roman findfont
    12 scalefont
    setfont
    0 setgray
    
    % Calculate total width of all description text components
    /str 150 string def
    /total_width 0 def
    /description (Zone Sieve - Focal Length: ) def
    /total_width total_width description stringwidth pop add def
    /focal_str FOCAL str cvs def
    /total_width total_width focal_str stringwidth pop add def
    /total_width total_width (mm | Zones: ) stringwidth pop add def
    /rings_str RINGS str cvs def
    /total_width total_width rings_str stringwidth pop add def
    /total_width total_width ( | Diameter: ) stringwidth pop add def
    /diam_str RINGS 2 mul 1 sub calc_radius_mm 2 mul str cvs def
    /total_width total_width diam_str stringwidth pop add def
    /total_width total_width (mm | F/Stop: ) stringwidth pop add def
    /fstop_str RINGS FOCAL calc_sieve_effective_fstop str cvs def
    /total_width total_width fstop_str stringwidth pop add def
    
    % Position text with calculated center offset
    pagewidth 2 div mmToPoints total_width 2 div sub
    20 mmToPoints
    moveto
    
    % Show all text pieces in sequence
    description show
    focal_str show
    (mm | Zones: ) show
    rings_str show
    ( | Diameter: ) show
    diam_str show
    (mm | F/Stop: ) show
    fstop_str show
} def
%*****************************************************************

%*****************************************************************
% Draw a Single Photon Sieve Centered on the Page
% Usage: drawCenteredPhotonSieve → -
%*****************************************************************
/drawCenteredPhotonSieve {
    gsave
    % Clear any existing drawing
    clippath 1 setgray fill
    0 setgray
    
    % Calculate center position for the photon sieve
    % Center of page is at (pagewidth/2, pageheight/2)
    pagewidth 2 div mmToPoints
    pageheight 2 div mmToPoints
    translate
    
    % Draw photon sieve at the center
    % Use existing drawPhotonSieve logic but without the translation
    
    % Draw Punch Outline
    0 setgray                                  
    .5 mmToPoints setlinewidth                                                   
    0 0 PUNCH_DIAMETER MAG mul 2 div mmToPoints 0 360 arc 
    stroke
    
    1 2 RINGS 2 mul {
        /n exch def
        
        /outer_radius_mm n 1 add calc_radius_mm def
        /inner_radius_mm n calc_radius_mm def
        /annulus_width_mm outer_radius_mm inner_radius_mm sub def

        /ring_center_radius_mm inner_radius_mm annulus_width_mm 2 div add def
        /num_circles annulus_width_mm SIEVE_SCALE mul ring_center_radius_mm calc_num_circles def
        /angular_spacing 360 num_circles div def
        rand 360 mod rotate
        1 1 num_circles {
            0 setgray
            angular_spacing rotate
            ring_center_radius_mm mmToPoints 0 annulus_width_mm SIEVE_SCALE mul 2 div mmToPoints 0 360 arc fill
        } for
    } for
    
    % Draw description at the bottom of the page
    grestore
    
    % Position for description - centered at bottom of page
    /Times-Roman findfont
    12 scalefont
    setfont
    0 setgray
    
    % Calculate total width of all description text components
    /str 150 string def
    /total_width 0 def
    /description (Photon Sieve - Focal Length: ) def
    /total_width total_width description stringwidth pop add def
    /focal_str FOCAL str cvs def
    /total_width total_width focal_str stringwidth pop add def
    /total_width total_width (mm | Zones: ) stringwidth pop add def
    /rings_str RINGS str cvs def
    /total_width total_width rings_str stringwidth pop add def
    /total_width total_width ( | Diameter: ) stringwidth pop add def
    /diam_str RINGS 2 mul 1 sub calc_radius_mm 2 mul str cvs def
    /total_width total_width diam_str stringwidth pop add def
    /total_width total_width (mm | F/Stop: ) stringwidth pop add def
    /fstop_str RINGS FOCAL calc_sieve_effective_fstop str cvs def
    /total_width total_width fstop_str stringwidth pop add def
    
    % Position text with calculated center offset
    pagewidth 2 div mmToPoints total_width 2 div sub
    20 mmToPoints
    moveto
    
    % Show all text pieces in sequence
    description show
    focal_str show
    (mm | Zones: ) show
    rings_str show
    ( | Diameter: ) show
    diam_str show
    (mm | F/Stop: ) show
    fstop_str show
} def
%*****************************************************************

%*****************************************************************
% Draw a Single Optical Element Centered on the Page
% Usage: elementType drawCenteredElement → -
% elementType: 1 = Zone Plate, 2 = Zone Sieve, 3 = Photon Sieve
%*****************************************************************
/drawCenteredElement {
    /elementType exch def
    
    % Clear any previous page content
    clippath 1 setgray fill
    0 setgray
    
    % Select the appropriate drawing function based on elementType
    elementType 1 eq {
        % Draw Zone Plate
        drawCenteredZonePlate
    } {
        elementType 2 eq {
            % Draw Zone Sieve
            drawCenteredZoneSieve
        } {
            elementType 3 eq {
                % Draw Photon Sieve
                drawCenteredPhotonSieve
            } {
                % Invalid element type - display error
                /Times-Bold findfont 14 scalefont setfont
                pagewidth 2 div mmToPoints pageheight 2 div mmToPoints moveto
                (Error: Invalid element type) stringwidth pop 2 div neg 0 rmoveto
                (Error: Invalid element type) show
            } ifelse
        } ifelse
    } ifelse
    
    showpage
} def
%*****************************************************************

%*****************************************************************
% Main execution based on TYPE variable
%*****************************************************************
/executeDrawing {
    % Check the TYPE variable and execute appropriate drawing
    TYPE (GRID) eq {
        % Draw grid of all elements
        currentRowIndex drawZonePage /currentRowIndex exch def
        showpage
    } {
        TYPE (PLATE) eq {
            % Draw centered Zone Plate
            1 drawCenteredElement
        } {
            TYPE (SIEVE) eq {
                % Draw centered Zone Sieve
                2 drawCenteredElement
            } {
                TYPE (PHOTON) eq {
                    % Draw centered Photon Sieve
                    3 drawCenteredElement
                } {
                    % Invalid TYPE - display error and show grid as default
                    /Times-Bold findfont 14 scalefont setfont
                    pagewidth 2 div mmToPoints pageheight 2 div mmToPoints moveto
                    (Error: Invalid TYPE. Using default GRID view.) stringwidth pop 2 div neg 0 rmoveto
                    (Error: Invalid TYPE. Using default GRID view.) show
                    
                    % Wait a moment to show error
                    1000 { 1 add } repeat
                    
                    % Show grid as default
                    currentRowIndex drawZonePage /currentRowIndex exch def
                    showpage
                } ifelse
            } ifelse
        } ifelse
    } ifelse
} def

% Execute drawing based on TYPE
executeDrawing


